@page "/home/{Id}"
@using BlazorApp.Data
@inject GetRequest ItemsRequest
@inject Mordor Mordor
@inject SearchAttributes S
@inject Search Srch

@* <input value="@value" @oninput="@(async (ChangeEventArgs e) => { value = e.Value.ToString(); await GetFilteredData(value); })" placeholder="Search the Item" /> *@

<section class="container mx-auto p-0 mt-5">
   <section class="bg-white rounded mx-auto col-sm-10 p-0 shadow">
      <div class="d-flex flex-wrap p-3 justify-content-between">
         @if (M == null)
         {
            <div class="col-sm-4 p-0 border-black border mx-3">Null</div>
         }
         else
         {
            @foreach (var item in M)
            {
               <div class="col-sm-3 p-3 mx-3 shadow mb-5" style="background-color: beige; border-radius: 20px;">
                  <img src="@item.imageURL" style="width: 100%; height: 83%;" />
                  <h6 class="mt-1 text-center">@item.itemName</h6>
               </div>   

            }      
         }
      </div>
   </section>
</section>

@* <div class="row flex-wrap">
   @if (Filter == null)
   {
      <div class="col-sm-4 p-0 border-black border mx-3">Nothing Here</div>
   }
   else
   {
      <h6>True</h6>
      @foreach (var item in Filter)
      {
         <div class="col-sm-3 p-0 border-black border mx-3">@item.itemName</div>          
      }      
   }
</div> *@

@code
{
   [Parameter]
   public string Id { get; set; }
   public Mordor[] M { get; set; }
   public Mordor[] Filter { get; set; }
   public string value { get; set; }

   protected override void OnParametersSet()
   {
      var x = Id;
   }

   // fetching all items in DB
   protected override async Task OnInitializedAsync()
   {
      M = await ItemsRequest.MordorRequest();
   }

   protected async Task GetFilteredData(string value)
   {
      Filter = await Srch.SearchItem(value);
   }
}